#!/bin/bash
set -e

usage() {
cat<<EOF
Usage:
  $0 [-q | -h] REPO [-- CMD ARGS...]

Options:
  -q     Print eval-friendly commands to configure the current shell.
  -h     Show this message.

Arguments:
  REPO   Specifies GitHub repository or another resource for the Go package to
         be downloaded. Allowed formats:
           * user/repo                            (github-only)
           * https://github.com/user/repo(.git)   (github-only)
           * git@github.com:user/repo.git         (github-only)
           * labix.org/mgo.1                      (go-get path)

  [-- CMD ARGS]
        Specifies the command to be executed in the package's environment. If
        omitted, an interactive shell will be started.

Examples:
  $ goclone ahmetb/govvv
  $ eval \$(goclone -q k8s.io/kubernetes)
  $ goclone https://github.com/pkg/errors -- cat LICENSE
EOF
}

WORKSPACE="${WORKSPACE:-"${HOME}/workspace"}"

quiet=
user=
repo=
github=
github_ssh=
go_get_url=

# parse command line arguments
while getopts qh opt; do
    case "${opt}" in
		q)
			quiet="true"
			;;
		h)
			usage; exit 1;;
		?)
			echo "Run with \"-h\" for help." >&2
			exit 1
	esac
done
shift $((OPTIND - 1))

# at least one positional argument required
if [[ $# -lt 1 ]]; then
	echo "$0: missing argument REPO" >&2
	exit 1
fi

# first positional argument is the repository
src="$1"
shift

# parse the remainder of arguments, preserve them to pass it to the new shell
while [[ $# -gt 0 ]]; do
	case "$1" in
	--)
		shift;break;;
	*)
		echo "$0: unrecognized extra positional argument: $1" >&2
		exit 1
	esac
done
exeargs=$*

# is github_user/github_repo
if [[ "$src" =~ ^([A-Za-z0-9-]+)\/([A-Za-z0-9-]+)$ ]]; then
    user="${BASH_REMATCH[1]}"
    repo="${BASH_REMATCH[2]}"
    github="true"

# is git@github.com:user/repo.git
elif [[ "$src" =~ ^git@github\.com:([A-Za-z0-9-]+)\/([A-Za-z0-9-]+)\.git$ ]]; then
    user="${BASH_REMATCH[1]}"
    repo="${BASH_REMATCH[2]}"
    github="true"
    github_ssh="true"

# is http(s)://github.com/user/repo(.git)
elif [[ "$src" =~ ^https?://github\.com/([A-Za-z0-9-]+)\/([A-Za-z0-9-]+)(\.git)?$ ]]; then
    user="${BASH_REMATCH[1]}"
    repo="${BASH_REMATCH[2]}"
    github="true"

# is go-get path (e.g. github.com/user/repo/pkg/subpkg, k8s.io/kubernetes, labix.org/mgo.v1)
elif [[ "$src" =~ ^([a-zA-Z0-9_\-]+[\.a-zA-Z0-9_\-]+)+(\/[A-Za-z0-9\._\-]+)+$ ]]; then
    go_get_url="$src"
    repo="${src//[\.\/]/-}" # replace '/' with '-'
else
    echo "$0: invalid REPO format \"${src}\".">&2
    exit 1
fi

project="$WORKSPACE/gopath-${repo}"
clone_path=
if [[ "$github" == "true" ]]; then
    clone_path="$project/src/github.com/${user}/${repo}"
else
    clone_path="$project/src/${go_get_url}"
fi

# TODO(ahmetb) if $GITHUB_USERNAME or ~/.github_username, add a remote called
# "my" pointing to user's fork in case of github.

# TODO(ahmetb) make sure clone errors surface as exit code in the script

# clone the repo if necessary
if [[ ! -d "${clone_path}" ]]; then
    if [[ "$github" == "true" ]]; then
        if [[ -x "$(command -v hub)" && -z "${FORCE_GIT}" ]]; then
            # use hub(1)
            (
                set -ex
                hub clone -q "${user}/${repo}" "${clone_path}"
            )
        else
            # use git(1)
            git_url=
            if [[ "$github_ssh" == "true" ]]; then
                git_url="$src"
            else
                git_url="$src"
                [[ "$git_url" == *.git ]] || git_url+=".git"
            fi
            (
                set -ex
                git clone -q "${git_url}" "${clone_path}"
            )
        fi
    else
        (
            set -ex
            env  GOPATH="${project}" go get -d "${go_get_url}"
        )
    fi
fi

if [[ "$quiet" == "true" ]]; then
	# print commands to prepare env
	echo "    export GOPATH=\"${project}\";"
	echo "    cd \"${clone_path}\";"
else
	if [[ -n "$exeargs" ]]; then
	# run command in env
	(
		cd "${clone_path}"
		env GOPATH="${project}" $SHELL -c "${exeargs[@]}"
	)
	else
	# start an interactive shell with env
	(
		cd "${clone_path}"
		echo -e "\033[32mgoclone: Starting a new shell in GOPATH=${project}$(tput sgr0)" >&2
		env GOPATH="${project}" $SHELL || true
		echo -e "\033[32mgoclone: Shell exited.$(tput sgr0)" >&2
	)
	fi
fi
